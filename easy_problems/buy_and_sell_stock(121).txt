input : array 'prices'
prices[i] elements are the price of a stock on the ith day
choose one day to buy stock
choose another day after the buy day to sell stock -> sell day can be every day execpt the first one
return the max profit from selling stock
if no profit, return 0

have first buy day be 0
iterate through first day to the end of 'prices[]' for possible sell days
	if you find a cheaper stock make it the new buy day
	do profit calculation
	find new max profit
return the absolute max profit


CODE:

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        max_profit = 0 #desired return
        current_profit = 0 #profit for that check
        buy_d = prices[0] #first buy day (cost)
    
        for i in range(1, len(prices)): #go over every possible sell day
            if prices[i] < buy_d: #if day is less than current, new buy day
                buy_d = prices[i]
            if prices[i] > buy_d: #if day is more than current
                current_profit = prices[i] - buy_d #stock profit math 
            if current_profit > max_profit: #check if this profit is the new max
                max_profit = current_profit
        return max_profit



OPTIMAL SOLUTION:

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        ret = 0 #initial return number (if no profit you want to return 0)
        l = 0 #first buy day, starts at first element of prices[]
        for i in range(1, len(prices)): #iterate over every day except the first one
            if prices[i] < prices[l]: #if the price of the current stock is lower than the current buy day
                l = i #make this the new stock to buy
            ret = max(ret, prices[i] - prices[l]) #return max of old profit and current profit
        return ret