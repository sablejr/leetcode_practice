input: string 's'
's' only contains characters '(', ')', '{', '}', '[' and ']'
return: true if 's' meets the specified conditions, else false
SECIFIED CONDITIONS: 
	1.)Open brackets must be closed by the same type of brackets.
	2.)Open brackets must be closed in the correct order.

open bracket must be followed by closed bracket of the same type

iterate through each char
	if char  is (')', '}', ']')
		if there is not ('(', '{', '[') before  it
			return false
	return true
		

CODE:

class Solution:
    def isValid(self, s: str) -> bool:
        par_table = ('(', '{', '[') #set for open par so we can match with closed par
        stack = [] #stack to add par into
        for i in s:
            if i in par_table: #if open par
                stack.append(i) #add to stack
            if i == ')' and (len(stack) == 0 or stack.pop() != '('): #if closed par and no open one in stack or element before is not (pops element before)
                return False
            if i == ']' and (len(stack) == 0 or stack.pop() != '['): #if closed par and no open one in stack or element before is not (pops element before)
                return False
            if i == '}' and (len(stack) == 0 or stack.pop() != '{'): #if closed par and no open one in stack or element before is not (pops element before)
                return False   
        return len(stack) == 0 #return true if all par were taken care of 
