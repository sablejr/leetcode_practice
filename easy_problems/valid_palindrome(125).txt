palindrome = reads the same fowards and backwards
convert all uppercase letters into lowercase letters, remove non-alphanumeric characters
input: string 's'
return true if a palindrome, empty string returns true
's' is only ascii characters


iterate over string with 2 pointers:
	if not alphanumeric character:
		return false
	adjust pointers 
return true



CODE:

class Solution:
    def isPalindrome(self, s: str) -> bool:
        l1 = [] #list for regular string
        l2 = [] #list for reversed string
        s = s.lower() #make everythin lowercase
        for i in range(0, len(s)): #iterate over string
            if s[i].isalnum() == True: #check to see if char is alphanumeric
                l1.insert(i, s[i]) #if so add it to the list
    
        for j in range(len(s)-1, -1, -1): #iterate over string (back-to-front)
            if s[j].isalnum() == True: #check to see if char is alphanumeric
                l2.append(s[j]) #if so add it to the list
        return l1 == l2 #return true if regular string and reversed string lists are the same


OPTIMAL SOLUTION (TWO POINTERS):

class Solution:
    def isPalindrome(self, s: str) -> bool:
        l, r = 0, len(s) - 1
        while l < r: 
            while l < r and not s[l].isalnum(): #skip left element if not alphanumeric
                l += 1
            while l < r and not s[r].isalnum(): #skip right element if not alphanumeric
                r -= 1
            if s[l].lower() != s[r].lower():  # if elements of equal distance apart are not the same, 's' is not a palindrome 
                return False
            l += 1 # increment left for next char check
            r -= 1 # decrement right for next char check
        return True