MAKING A CLASS IMPLEMENTATION
implement a queue using only 2 stacks
specifications:
		push(int x) : push element x into the back of the queue 
		pop() : remove the element in the front of the queue and return it
		peek() : return the element at the front of the queue
		empty() : if queue is empty return true else false

initialize 2 stacks, a push stack and a pop stack

iterate over the push stack
	pop the element from the push stack and append it to the pop stack 
	(this will give you a reverse stack so we can use the same functions to get  queue functionality)
		ex.) [1, 2, 3] ->  [3, 2, 1]

push ->  append element to back of push stack

pop ->  if push stack has stuff in it 
		add it to the pop stack 
	pop and return the last element from the pop stack

peek -> if push stack has stuff in it 
		add it to the pop stack 
	return the first element from the pop stack

empty -> check if push or pop stack has elements

CODE:

class MyQueue:
    def __init__(self):
      self.push_stack = []
      self.pop_stack = []
        

    def push(self, x: int) -> None:
      self.push_stack.append(x) #add element to the push stack
        

    def pop(self) -> int:
      if not self.pop_stack: #if pop_stack has no elements
        for _ in range(len(self.push_stack)): #iterate over all elements in push stack
          self.pop_stack.append(self.push_stack.pop()) #push all elements to it from the push stack
        
      return self.pop_stack.pop() #otherwise, pop the last element
        
    
    def peek(self) -> int:
      if not self.pop_stack: #if pop_stack has no elements
        for _ in range(len(self.push_stack)): #iterate over all elements in push stack
          self.pop_stack.append(self.push_stack.pop()) #push all elements to it from the push stack
        
      return self.pop_stack[-1] #otherwise return last element of pop stack
        
    def empty(self) -> bool:
      #if both stacks are empty return True
      return True if len(self.push_stack) == 0 and len(self.pop_stack) == 0 else False

--------------------------------------------------------------------------------------------

    TIME COMPLEXITY: amortized O(1) for pop and peek, O(1) for push and empty
    SPACE COMPLEXITY: O(N)