input: 1-indexed array integer array called 'numbers' -> already sorted in increasing order

find 2 numbers that add up to 'target' number (exactly one solution every time)

numbers[index1], numbers[index2]

CODE:

			NAIVE SOLUTION

class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        prevmap = {} #store numbers
        index = [] #array for output
        for i, n in enumerate(numbers): #i is index, n is number
            diff = target - n #difference value
            if diff in prevmap: #if there is a difference value in the dict, do the return
                index.append(prevmap[diff] + 1) #add number 1 with specifications listed
                index.append(i + 1) #add number 2 with specifications listed
                return index 
            prevmap[n] = i #if not add the value to prevmap






SIDENOTE: prevmap[n] = i -> {number: index}



			TWO POINTER SOLUTION

class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        r = len(numbers) - 1 #right of list
        l = 0 #left of list
        index = [] #return list
        
        while l < r: # loop through array
            sum = numbers[l] + numbers[r] #assignment of sum for faster results
            if  sum == target: #if we found both numbers
                l += 1 #for return specifications
                r += 1
                index.append(l) #add elements to list
                index.append(r)
                return index   #return list    
            if sum < target:   #else make left bounds smaller
                l += 1                
            if sum > target:   #else make right bounds smaller
                r -= 1