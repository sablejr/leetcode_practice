input: 2 non empty linked lists

lists represent 2 numbers in reverse order
	ex.) 2->4->3 = 342
	     5->6->4 = 456

numbers are non negative
two numbers do not contain any leading 0 except for 0 (there is no 01, but there is 0)


add the two numbers and return the sum as a linked list
	ex.) 2->4->3 + 5->6->4 = 807 -> RETURN 7->0->8

make returning linked list
iterate through list until the tail (no new node)



CODE:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        sum = ListNode() #dummy node so we don't have to deal with edge cases of inserting into a LL
        cur_node = sum #current pointer starting at the beginning of sum
        carry_dig = 0 #initialize carry digit for addition
        while l1 or l2 or carry_dig != 0: #iterate through if either list has an element/there is a carry
            if l1: #if l1 is not null
                num1 = l1.val #store l1 value
            else:
                num1 = 0 #if null add nothing 
            if l2: #if l2 is not null
                num2 = l2.val #store l2 value
            else:
                num2 = 0 #if null add nothing        
            val = num1 + num2 + carry_dig #add both numbers + any carry to have new sum
            carry_dig = val // 10 #check to see if we get a new carry digit and store it
            if  val >= 10: #if ther is a carry digit
                val = val % 10 #we gotta get the ones place digit to store in node
            cur_node.next = ListNode(val) #store value in node
            cur_node = cur_node.next #increment to the next node
            if l1: #if node is not null (not at the end of l1)
                l1 = l1.next #increment l1

            if l2: #if node is not null (not at the end of l2)
                l2 = l2.next #increment l1
        return sum.next
